# This workflow will deploy source code on Cloud Run when a commit is pushed to
# the "main" branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Build (cloudbuild.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Source Developer (roles/run.sourceDeveloper)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources.
#
# 3. Change the values in the "env" block to match your values.

name: Deploy to Cloud Run from Source

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }} # TODO: update to your Google Cloud project ID
  REGION: ${{ secrets.REGION }} # TODO: update to your region
  BACKEND_REPO_NAME: ${{ secrets.BACKEND_REPO }}
  LLM_REPO_NAME: ${{ secrets.LLM_REPO }}
  BACKEND_SERVICE: spring-app # TODO: update to your service name
  LLM_SERVICE: llm-server

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3 # actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2 # google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.IAM_SECRET_KEY }} # TODO: replace with your workload identity provider

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Docker auth to Artifact Registry
        run: |
          gcloud auth configure-docker asia-northeast3-docker.pkg.dev

      - name: Build and Push backend Docker image
        run: |
          docker build -t asia-northeast3-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPO_NAME }}/spring-app:${{ github.sha }} ./backend
          docker push asia-northeast3-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPO_NAME }}/spring-app:${{ github.sha }}

      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy spring-app \
            --image asia-northeast3-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPO_NAME }}/spring-app:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars SPRING_PROFILES_ACTIVE=prod

      - name: Build and Push llm Docker image
        run: |
          docker build -t asia-northeast3-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.LLM_REPO_NAME }}/llm-server:${{ github.sha }} ./llmserver
          docker push asia-northeast3-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.LLM_REPO_NAME }}/llm-server:${{ github.sha }}

      - name: Deploy llm to Cloud Run
        run: |
          gcloud run deploy spring-app \
            --image asia-northeast3-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.LLM_REPO_NAME }}/llm-server:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
